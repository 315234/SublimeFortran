%YAML 1.2
---
name: Fortran (Modern)
file_extensions: [f90, F90, f95, F95, f03, F03, f08, F08]
scope: source.modern-fortran

# TO DO:
# control flow:
#   forall
#   do concurrent
#   while
#   return
#   stop
#   then
#   select
#   case
#   cycle
#   exit
#   error stop
# program units:
#   data
#   external
#   program
#   function (result)?
#   subroutine
#   interface
#   module
#   submodule
#   contains
# misc program scopes:
#   associate
# variable attributes:
#   save
#   implicit
#   dimension
#   parameter
#   allocatable
#   intent
#   pointer
#   target
#   contiguous
# subroutine attributes:
#   recursive
#   pure
#   elemental
# import:
#   import
#   include
#   use, only
# pointer commands:
#   nullify
# special types:
#   procedure
#   enum
# derived data types:
#   type
#   sequence
#   abstract
#   extends
#   % (member access)
# procedure attributes:
#   non_overridable
# coarrays:
#   sync all
#   sync images
#   sync memory
#   lock
#   unlock
#   codimension


# other:
#   assign
#   backspace
#   block data
#   endfile
#   entry
#   equivalence
#   intrinsic
#   namelist
#   operator
#   optional

#   asynchronous
#   bind
#   class
#   deferred
#   end *enum
#   enumerator
#   final
#   generic
#   nopass
#   pass
#   value
#   volatile
#   block
#   critical




variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'
  type: '(?xi:\binteger\b|\breal\b|\bcomplex\b|\blogical\b|\bcharacter\b|\bdouble\s+precision\b|\btype\s*\(\s*[\w]+\s*\) )'
  modifier: '(?xi:elemental|pure|impure|recursive|module)'
  attribute: '(?xi:allocatable|pointer|target|equivalence|parameter|external|intrinsic|save|optional|contiguous)'

contexts:
  main:
    # Try to keep all the modern/punchcard differences at the top here
    # comments
    - match: \!
      push: comment
    # tabs are illegal
    - match: \t
      scope: invalid.illegal.tab.fortran











    # M4 macro quoted strings
    - match: \`
      push: m4macrostring
    - match: (^\s*dnl\b)
      push: comment
    # strings
    - match: \'
      push: singlestring
    - match: (\")
      push: doublestring

    # use statements etc
    - match: (?xi:^  \s*  (use)  \s+  (\w+)  ( (,)  \s*  (only)  \s*  (:) )?  )
      captures:
        0: use.statement.fortran
        1: keyword.use.fortran
        2: storage.type.module.fortran
        3: optional.group.use.statement.fortran
        5: keyword.only.fortran

    # implicit statement
    - match: (?xi:(implicit)  \s+  (none|.*)  )
      captures:
        0: implicit.statement.fortran
        1: keyword.implicit.fortran
        2: meta.implicit-specification.fortran

    # OpenMP
    - match: (?x:^  \s*  ([!]\$)  .*  $)
      scope: support.other.openmp.fortran




    # program definition
    - match: (?xi:^  \s*  (program)  \s+  ({{ident}})  \s*  $)
      captures:
        1: storage.type.program.fortran
        2: entity.name.function.program.fortran

    # type definition
    - match: (?xi:^  \s*  (type)  (\s*::\s*|\s+)  (\w+)  \s*  $)
      captures:
        1: keyword.type.fortran
        2: keyword.operator.fortran
        3: entity.name.function.type.fortran

    # module definition
    - match: (?xi:^  \s*  (module)  \s+  (\w+)  \s*  $)
      captures:
        1: keyword.module.fortran
        2: entity.name.function.module.fortran

    # submodule definition
    - match: (?xi:^  \s*  (submodule)  \s* \(({{ident}})\)  \s* ({{ident}})  \s*  $)
      captures:
        1: keyword.submodule.fortran
        2: variable.other.module.fortran
        3: entity.name.function.module.fortran

    # enum
    - match: (?xi:^  \s*  (enum(,\s*bind\(c\))?) \s* $)
      captures:
        1: keyword.enum.fortran
    - match: (?xi:\benumerator\b)
      scope: keyword.enumerator.fortran
    # end enum
    - match: (?xi:^  \s*  (endenum) \b)
      captures:
        1: keyword.enum.fortran

    # interface with name
    - match: (?xi:(?<!end) (interface) (\s+ {{ident}})?  \s*  $)
      captures:
        1: keyword.function.fortran
        2: entity.name.function.fortran
      # push: interface

    # function/subroutine definition with parameter list
    - match: (?xi:({{modifier}}\s+)? ({{type}}\s+)?  (?<!end)  \s*  (function|subroutine)\b  \s+  ({{ident}})  \s*  (\(|&) )
      captures:
        1: keyword.modifier.fortran
        2: storage.type.fortran
        3: keyword.function.fortran
        4: entity.name.function.fortran
      push: subroutine_parameter_list

    # subroutine definition without parameter list
    - match: (?xi:^  \s*  ({{modifier}}\s+)?  \s*  (subroutine)\b  \s+  ({{ident}})  \s*  )
      captures:
        1: storage.type.fortran
        2: keyword.function.fortran
        3: entity.name.function.fortran
      # push: subroutines

    # end with block type and possible identifier
    - match: (?xi:^  \s*  (end)  \s+(function|subroutine|module|submodule|type|interface|program|type)? (\s+{{ident}})?   )
      scope: meta.end-statement.fortran
      captures:
        1: keyword.control.end.fortran
        2: storage.type.fortran
        3: entity.name.function.fortran





    # if statement
    - match: (?xi:^  \s*  (if|else\s*if|elif|endif)  \b  )
      scope: keyword.control.fortran
    # select case statement
    - match: (?xi:^  \s*  (select\s+case)  \b  )
      scope: keyword.control.fortran
    - match: (?xi:^  \s*  (case)  .*  (:)  \b  )
      captures:
        1: keyword.control.fortran
    # where/forall statement
    - match: (?xi:^  \s*  (where|elsewhere|forall|endwhere|endforall)  \b  )
      scope: keyword.control.fortran
    # do loop
    - match: (?xi:^  \s*  (do\s+concurrent|do)  \b  (\s+\d+\s+)?  \s*  )
      captures:
        1: keyword.control.fortran
        2: variable.parameter.fortran

    # statements controling the flow of the program
    - match: \b(?i:(assign|to|if|then|else|elseif|elif|select\s*case|case|end\s*select|end\s*if|continue|stop|error\s+stop|pause|do|end\s*do|while|cycle|exit))\b
      scope: keyword.control.fortran

    # programming units
    - match: \b(?i:(entry|return|contains|include))\b
      scope: keyword.control.programming-units.fortran
    # rename import operator/pointer assignment operator
    - match: =>
      scope: keyword.operator.fortran
    # C style comparison operators
    - match: (==|<|>|<=|>=)
      scope: keyword.operator.c-style.fortran
    # variable assignment operator
    - match: \s=\s
      scope: keyword.operator.fortran
    # floating point literals with an exponent (must come before -+ operators) and optional underscore kind
    - match: (?xi:(?<!\w)  [-+]?  (\d+\.\d+ | \d+\. | \.\d+ | \d+ )  ([ed][-+]?\d+)?  (_\w+)? )
      scope: constant.numeric.floating-point.fortran
    # arithmetic operators
    - match: (?x:=  |  -  |  \+  |  /  |  \*  |  //  |  ::)
      scope: keyword.operator.fortran
    # logical operators
    - match: (?xi:\.  (and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)  \.)
      scope: keyword.operator.logical.fortran
    # type member access
    - match: (?xi:(\w+) \s* (%) \s* (\w+)  )
      captures:
        2: keyword.operator.member-access.fortran

    # types
    - match: "{{type}}"
      scope: storage.type.fortran
    # user defined types
    - match: \b(?i:(type\([\s\w]+\)))\b
      scope: storage.type.fortran
    # other
    - match: \b(?i:(operator|assignment))\b
      scope: storage.type.fortran
    # # variable declaration
    # - match: ^\s*(?i:(integer|real|complex|logical|character|double\s+precision))\b
    #   scope: storage.type.fortran
    #   push: variabledeclaration

    # variable intent
    - match: (?xi:\b  (intent)  \s* \(  \s*  (in|out|inout)  \s*  \)  )
      captures:
        0: meta.intent.fortran
        1: keyword.intent.fortran
        2: constant.language.fortran

    # variable dimension
    - match: (?xi:\b  (dimension)  \s* \(  [^)]*  \)  )
      captures:
        0: meta.dimension.fortran
        1: keyword.dimension.fortran

    # dimension statement
    - match: (?xi:^  \s*  (dimension)  \b  )
      captures:
        1: keyword.dimension.fortran

    # variable with asterisk as dimension
    - match: (?xi:(\w+)  \( (\*) \))
      captures:
        1: variable.parameter.fortran
        2: variable.parameter.fortran

    # continue label, possibly numbered
    - match: (?xi:^  \s*  (\d+)?  \s*  (continue)  \s*  $)
      captures:
        0: meta.continue-label.fortran
        1: variable.parameter.fortran
        2: keyword.continue.fortran
    # labeled statement
    - match: ^(    \d|   \d\d|  \d\d\d)
      scope: variable.parameter.fortran
    # goto statement
    - match: (?xi:\b  (go\s*to)  \s+  (\d+))
      captures:
        1: keyword.goto.fortran
        2: variable.parameter.fortran


    # data type attributes
    - match: \b(?i:{{attribute}})\b
      scope: storage.modifier.fortran

    # IO: open, close
    - match: (?xi:\b  (close|open)  \s*  \(  )
      captures:
        1: support.function.fortran

    # IO: print, write, rewrite, read
    - match: (?xi:\b  (print|write|rewrite|read)  \s*  (?= (\(|\*|\d+) )  )
      captures:
        1: support.function.fortran

    # IO: pause, wait, rewind, flush, inquire
    - match: (?xi:\b  (pause|wait|rewind|flush|inquire)  \s*  \(  )
      captures:
        1: support.function.fortran

    # IO: format statement
    - match: (?xi:^  \s*  (\d+)  \s+  (format)  \(  )
      captures:
        0: format.statement.fortran
        1: constant.numeric.fortran
        2: keyword.format.fortran
      push: formatstring

    # allocate, deallocate
    - match: (?xi:\b  (allocate|deallocate)  \b  \s*  \(  \s*  (\w+)  )
      captures:
        1: support.function.fortran
        2: variable.other.fortran


    # preprocessor logic
    - match: (?xi:^  \s*  \#  \s*  (define|undef|if|ifdef|ifndef|else|endif)  \b  .*  $)
      scope: keyword.control.fortran
    # preprocessor include
    - match: (?xi:^  \s*  \#  \s*  (include|import)  \b  )
      scope: keyword.control.import.include.fortran
      push: preprocessor_include
    # preprocessor warning
    - match: (?xi:^  \s*  \#  \s*  (error|warning)  \b  )
      captures:
        1: keyword.control.import.error.fortran
      push: preprocessor_errorwarning

    # namelist /name/ variables
    - match: (?xi:^  \s*  (namelist)  \s*  (/\w+/)  \s*  )
      captures:
        0: namelist.statement.fortran
        1: keyword.namelist.fortran
        2: storage.type.namelist-name.fortran
      push: namelist

    # common block with name
    - match: (?xi:^  \s*  (common)  \s*  (/\w+/)  \s*  )
      captures:
        0: common.statement.fortran
        1: keyword.common.fortran
        2: storage.type.common-block-name.fortran
      push: common
    # common block with no name given
    - match: (?xi:^  \s*  (common)  \s+  )
      captures:
        0: common.statement.fortran
        1: keyword.common.fortran
      push: common
    # data statement
    - match: (?xi:^  \s*  (data)  \s+  (\w+)  \s*  (/))
      captures:
        1: keyword.data.fortran
        2: storage.data.fortran
    # block data statement
    - match: (?xi:^  \s*  (block\s*data)  \s+  (\w+)  )
      captures:
        1: keyword.block-data.fortran
        2: storage.block-data.fortran
      push: blockdata

    # public/private/protected keywords
    - match: (?xi:^  \s*  \b(public|private|protected) \b )
      captures:
        1: keyword.scope.fortran


    # coarray stuff
    - match: (?xi:^  \s*  \b(sync) \s+ (all|images|memory)\b )
      scope: support.function.coarrays.sync.fortran
    - match: (?xi:(?<=\w) (\[) ([^\]]*) (]) )
      scope: constant.coarrays.fortran
    # coarrays:
    #   lock
    #   unlock
    #   codimension

    # associate block
    - match: (?xi:^ \s* (associate) (\() (.*) (\)) )
      captures:
        1: keyword.associate.fortran
    - match: (?xi:^ \s* (end\s*associate))
      captures:
        1: keyword.associate.fortran




    # built-in constants
    - match: (?i:\.true\.|\.false\.)
      scope: constant.language.fortran

    # numeric literals (without an exponent)
    - match: \b[0-9.]*\b
      scope: constant.numeric.fortran

    # Intrinsic functions in Fortran 90
    # https://www.nsc.liu.se/~boein/f77to90/a5.html
    # 1. Function which determines if a certain argument is in an actual argument list
    - match: (?x:\b  (?i:present)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 2. Numerical functions
    - match: (?x:\b  (?i:abs|aimag|aint|anint|cmplx|conjg|dble|dim|dprod|int|max|min|mod|nint|real|sign)  \b  (?=\s*\()  )
      scope: support.function.fortran
    - match: (?x:\b  (?i:ceiling|floor|modulo)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 3. Mathematical functions
    - match: (?x:\b  (?i:acos|asin|atan|atan2|cos|cosh|exp|log|log10|sin|sinh|sqrt|tan|tanh)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 4. Character string functions
    - match: (?x:\b  (?i:achar|adjustl|adjustr|char|iachar|ichar|index|len_trim|lge|lgt|lle|llt|repeat|scan|trim|verify)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 5. Character string function for request
    - match: (?x:\b  (?i:len)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 6. Kind functions
    - match: (?x:\b  (?i:kind|selected_int_kind|selected_real_kind)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 7. Logical function
    - match: (?x:\b  (?i:logical)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 8. Numerical inquiry functions
    - match: (?x:\b  (?i:digits|epsilon|huge|maxexponent|minexponent|precision|radix|range|tiny)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 9. Bit inquiry function
    - match: (?x:\b  (?i:bit_size)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 10. Bit manipulation functions
    - match: (?x:\b  (?i:btest|iand|ibclr|ibits|ibset|ieor|ior|ishft|ishftc|not)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 11. Transfer functions
    - match: (?x:\b  (?i:transfer)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 12. Floating-point manipulation functions
    - match: (?x:\b  (?i:exponent|fraction|nearest|rrspacing|scale|set_exponent|spacing)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 13. Vector- and matrix-multiplication functions
    - match: (?x:\b  (?i:dot_product|matmul)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 14. Array functions
    - match: (?x:\b  (?i:all|any|count|maxval|minval|product|sum)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 15. Array inquiry functions
    - match: (?x:\b  (?i:allocated|lbound|shape|size|ubound)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 16. Array construct functions
    - match: (?x:\b  (?i:merge)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 17. ARRAY reshape function
    - match: (?x:\b  (?i:reshape)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 18. ARRAY manipulation functions
    - match: (?x:\b  (?i:cshift|eoshift|transpose)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 19. Array location functions
    - match: (?x:\b  (?i:maxloc|minloc)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # 20. Pointer inquiry functions
    - match: (?x:\b  (?i:associated)  \b  (?=\s*\()  )
      scope: support.function.fortran

    # 21. Intrinsic subroutines
    # Time routines / Bit copy routine / Random number routines
    - match: (?x:\b  (call)  \s+  (?i:date_and_time|system_clock|count_max|mvbits|random_number|random_seed)  \b  (?=\s*\()  )
      captures:
        1: keyword.call.fortran
        2: support.function.fortran

    # Nullify statement
    - match: (?x:\b  (?i:nullify)  \b  (?=\s*\()  )
      scope: support.function.fortran

    # Fortran 2008: http://www.nag.co.uk/nagware/np/r60_doc/nag_f2008.html#AUTOTOC_6
    # Mathematics
    - match: (?x:\b  (?i:acosh|asinh|atanh|hypot|norm2|erf|erfc|erfc_scaled|gamma|log_gamma)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # Bit manipulation
    - match: (?x:\b  (?i:bge|bgt|ble|blt|dshiftl|dshiftr|iall|iany|iparity|leadz|trailz|maskl|maskr|merge_bits|parity|popcnt|poppar)  \b  (?=\s*\()  )
      scope: support.function.fortran
    # Other
    - match: (?x:\b  (?i:execute_command_line|storage_size|is_contiguous)  \b  (?=\s*\()  )
      scope: support.function.fortran

    # ISO_FORTRAN_ENV
    - match: (?x:\b  (?i:int8|int16|int32|int64|real32|real64|real128)  \b  )
      scope: support.type.fortran
    - match: (?x:\b  (?i:character_kinds|integer_kinds|logical_kinds|real_kinds)  \b  )
      scope: support.type.fortran

    ##########################
    # IEEE Intrinsic Modules #
    ##########################

    # IEEE_ARITHMETIC module
    - match: (?xi:\b ieee_(class_type|round_type) \b)
      scope: support.type.fortran
    # IEEE_CLASS_TYPEs
    - match: (?xi:\b ieee_(signaling_nan|negative_normal|quiet_nan|positive_denormal|positive_inf|negative_denormal|negative_inf|positive_zero|positive_normal|negative_zero|other_value) \b )
      scope: support.variable.fortran
    # IEEE_ROUND_TYPEs
    - match: (?xi:\b ieee_(nearest|to_zero|up|other|down) \b )
      scope: support.variable.fortran

    # IEEE_EXCEPTIONS module
    - match: (?xi:\b ieee_(flag_type|status_type) \b)
      scope: support.type.fortran
    # IEEE_FLAG_TYPEs
    - match: (?xi:\b ieee_(invalid|divide_by_zero|overflow|inexact|underflow|usual|all) \b )
      scope: support.variable.fortran

    # IEEE_FEATURES module
    - match: (?xi:\b ieee_(features_type|status_type) \b)
      scope: support.type.fortran
    # IEEE_FEATURES_TYPEs
    - match: (?xi:\b ieee_(datatype|inf|divide|nan|rounding|inexact_flag|sqrt|invalid_flag|denormal|underflow_flag|halting) \b )
      scope: support.variable.fortran

    # IEEE Procedures
    - match: (?xi:\b ieee_(class|copy_sign) \b )
      scope: support.function.fortran
    - match: (?xi:\b (call) \s* (ieee_(get|set)_(flag|halting_mode|rounding_mode|status|underflow_mode)) \b )
      captures:
        1: keyword.subroutine-call.fortran
        2: support.function.fortran
    - match: (?xi:\b ieee_is_(finite|nan|negative|normal) \b )
      scope: support.function.fortran
    - match: (?xi:\b ieee_(logb|next_after|rem|rint|scalb|selected_real_kind) \b )
      scope: support.function.fortran
    - match: (?xi:\b ieee_support_(datatype|denormal|divide|flag|halting|inf|io|nan|rounding|sqrt|standard|underflow_control) \b )
      scope: support.function.fortran
    - match: (?xi:\b ieee_(unordered|value) \b )
      scope: support.function.fortran

     
    # generic subroutine call
    - match: (?xi:\b  (call)  \s*  ({{ident}})  \s*  (?=\(|$)  )
      captures:
        1: keyword.call.fortran
        2: meta.subroutine-call.fortran
    # # generic function call (or array access)
    # - match: (?x:({{ident}})  \s*  (?=\()  )
    #   scope: meta.function-call.fortran





  # additional contexts

  preprocessor_include:
    - meta_scope: meta.preprocessor.fortran.include
    - match: (?=(?://|/\*))|$\n?
      pop: true
    - match: \'
      push: singlestring
    - match: \"
      push: doublestring
    - match: (<)
      push: include_angle_brackets
  include_angle_brackets:
    - meta_scope: string.quoted.other.lt-gt.include.fortran
    - match: (>)
      pop: true
  preprocessor_errorwarning:
    - meta_scope: meta.preprocessor.diagnostic.fortran
    - match: $\n?
      pop: true


  m4macrostring:
    - meta_scope: string.quoted.m4macro.fortran
    - match: (\')
      pop: true
  singlestring:
    - meta_scope: string.quoted.single.fortran
    - match: \'\'
      scope: constant.character.escape.apostrophe.fortran
    - match: (\')
      pop: true
  doublestring:
    - meta_scope: string.quoted.double.fortran
    - match: \"\"
      scope: constant.character.escape.quote.fortran
    - match: (\")
      pop: true


  comment:
    - meta_scope: comment.line.fortran
    - match: $\n?
      pop: true

  subroutine_parameter_list:
    - meta_content_scope: meta.subroutine-parameter-list.fortran
    - match: \w+ # variable name in the parameter list
      scope: variable.parameter.fortran
    # match closing bracket plus result(...)
    - match: (?xi:\) \s* (result)  \s*  \(   \s*  (\w+) \s* \))
      captures:
        1: keyword.function-result.fortran
        2: variable.parameter.fortran
      pop: true
    # match closing bracket only
    - match: \)
      pop: true
  #     set: subroutines # close parameter list scope, push subroutines scope
  # subroutines:
  #   - meta_content_scope: meta.subroutine.fortran
  #   - include: main
  #   - match: (?xi:^  \s*  (end)  ( $ | \s*(function|subroutine) (\s+{{ident}})? )  )
  #     captures:
  #       1: keyword.subroutine-end.fortran
  #       2: storage.type.fortran
  #     pop: true

  namelist:
    - meta_content_scope: meta.namelist.fortran
    - match: ({{ident}})
      scope: variable.parameter.namelist.fortran
    # Don't end the block if the newline is preceded by an &
    - match: (?<!&)\n
      pop: true

  common:
    - meta_content_scope: meta.common-block.fortran
    - match: ({{ident}})
      scope: variable.parameter.common-block-name.fortran
    # Don't end the block if the newline is preceded by an &
    - match: (?<!&)\n
      pop: true

  blockdata:
    - meta_content_scope: meta.common-block.fortran
    - match: \b(?i:end)\b
      pop: true

  formatstring:
    - meta_content_scope: meta.format-string.fortran
    - match: \'
      push: singlestring
    - match: (\")
      push: doublestring
    - match: (?xi:(\d+)?  (pe|[aeigfx])  (\d+)?  \.?  (\d+)?  )
      scope: constant.numeric.fortran   # whole thing
    - match: \)
      pop: true

  # variabledeclaration:
  #   - meta_content_scope: meta.variable-declaration.fortran
  #   - include: comments
  #   - match: (?<=\,)\s*((?i:save|implicit|dimension|parameter|allocatable|intent|pointer|target|private|public|protected|contiguous))
  #     captures:
  #       1: keyword.variable-attribute.fortran
  #   - match: (::)
  #     scope: keyword.operator.fortran
  #   - match: $\n?
  #     pop: true

